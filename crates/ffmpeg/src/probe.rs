use crate::{
	dict::FFmpegDict,
	error::Error,
	format_ctx::FFmpegFormatContext,
	utils::{from_path, CSTRING_ERROR_MSG},
};
use ffmpeg_sys_next::{av_log_set_level, AV_LOG_FATAL};
use std::{ffi::CString, path::Path};

pub fn probe(filename: impl AsRef<Path>) -> Result<(), Error> {
	let filename = filename.as_ref();

	// Reduce the amount of logs generated by FFmpeg
	unsafe { av_log_set_level(AV_LOG_FATAL) };

	// Dictionary to store format options
	let mut format_opts = FFmpegDict::new(None);
	// Some MPEGTS specific option (copied and pasted from ffprobe)
	let scan_all_pmts = CString::new("scan_all_pmts").expect(CSTRING_ERROR_MSG);
	format_opts.set(
		scan_all_pmts.to_owned(),
		CString::new("1").expect(CSTRING_ERROR_MSG),
	)?;

	// Open an input stream, read the header and allocate the format context
	let fmt_ctx = FFmpegFormatContext::open_file(from_path(filename)?, &mut format_opts)?;

	// Reset MPEGTS specific option
	format_opts.reset(scan_all_pmts)?;

	// Read packets of a media file to get stream information.
	fmt_ctx.find_stream_info()?;

	Ok(())
}
